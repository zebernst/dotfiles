# Global git config file

[core]
	autocrlf      = input
    safecrlf      = warn
    excludesFile  = ~/.config/git/ignore
    editor        = vim
    pager         = less -+$LESS -R

[include]
    # Includes user info
    path    = ~/.config/git/config.user

[gpg]
	program = /usr/local/bin/gpg

[credential]
    helper  = osxkeychain

[push]
    default = current

[pull]
    default = current

[diff]
    mnemonicprefix = true

[commit]
    gpgsign = true

[pager]
    diff    = $(brew --prefix git)/share/git-core/contrib/diff-highlight/diff-highlight | less -+$LESS -R
    log     = $(brew --prefix git)/share/git-core/contrib/diff-highlight/diff-highlight | less -+$LESS -R
    show    = $(brew --prefix git)/share/git-core/contrib/diff-highlight/diff-highlight | less -+$LESS -R

[color]
    ui      = auto
    branch  = auto
    diff    = auto
    status  = auto

[gitflow "branch"]
    master      = master
    develop     = develop
[gitflow "prefix"]
    feature     = feature/
    release     = release/
    bugfix      = bugfix/
    hotfix      = hotfix/
    support     = support/
    versiontag  = v

[url "https://gist.github.com/"]
    insteadOf   = gist://

[url "https://github.com/"]
    insteadOf   = gh://

[url "git@github.com:"]
    InsteadOf      = gh:
    pushInsteadOf  = git://github.com/
    pushInsteadOf  = https://github.com/

[alias]
    # basic
    st  = status -s 
    a   = add
    ai  = add --interactive
    cl  = clone
    ci  = commit 
    co  = checkout
    br  = branch
    r   = reset
    cp  = cherry-pick
    gr  = grep -Ii

    # commit
    cm      = commit -m                 # commit with the specified message
    cv      = commit -v                 # shows file diff in commit message
    cma     = commit -a -m              # commit all unstaged changes with the specified message
    amend   = commit --amend -C HEAD    # amend staged changes to previous commit, keeping the same commit message

    # setup
    sup     = branch --set-upstream-to=origin/$(git symbolic-ref --short -q HEAD)

    # log
    lg      = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)'
    # ls      = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate
    # ll      = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat
    # lds     = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=short
    # ld      = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=relative
    last    = log -1 HEAD

    # diff
    df      = diff --word-diff      ; diff working directory by words, not lines
    dc      = diff --cached         ; diff staged changes
    dlc     = diff --cached HEAD^   ; diff last commit

    # reset
    undo    = reset HEAD~1 --mixed  ; undo changes from last commit
    wipe    = "!git add -A && git commit -qm 'WIPE SAVEPOINT' && git reset HEAD~1 --hard" ;commit everything in wd and do a hard reset, isolating the savepoint commit
    unstage = reset --              ; unstage file from HEAD
    untrack = rm --cached           ; remove file from repository, and keep in working directory as untracked file

    rv   = revert                   ; create a new commit that undoes changes made in the specified commit and apply to current branch ("safe" undo)
    r1   = reset HEAD^
    r2   = reset HEAD~
    rh   = reset --hard
    rh1  = reset HEAD^ --hard
    rh2  = reset HEAD~ --hard
    

    # stash
    sl  = stash list
    sa  = stash apply
    ss  = stash save
    
    # assume
    assume      = update-index --assume-unchanged           ; assume untracked file stays unchanged
    unassume    = update-index --no-assume-unchanged        ; don't assume untracked file stays unchanged
    assumed     = "!git ls-files -v | grep ^h | cut -c 3-"  ; show assumed files
    unassumeall = "!git assumed | xargs git update-index --no-assume-unchanged" 
    assumeall   = "!git status -s | awk {'print $2'} | xargs git assume"

    # hub commands
    pull-request= "!hub pull-request"
    fork        = "!hub fork"
    create      = "!hub create"
    browse      = "!hub browse"
    compare     = "!hub compare"
    release     = "!hub release"
    issue       = "!hub issue"
    ci-status   = "!hub ci-status"

    # misc
    root        = "!cd $(git rev-parse --show-toplevel || echo ".")"    ; takes you to the top level of the repository
    ec          = config --global --edit                                ; edit global config in $EDITOR
    aliases     = "!anon() { git config --get-regexp \"^alias\\.${1}\" | gsed -E 's/^alias\\.(\\w+) (.*)$/git \\1 = \\2/' | sort; }; anon"    ; list aliases (filter by regex)
    initcommit  = "!git commit -am\"[empty] initial commit\" --allow-empty" ; initial empty commit
    f           = "!git ls-files | grep -i"                     ; grep filenames
    newignore   = "!gi() { curl -L -s https://www.gitignore.io/api/$@ ;}; gi" # supported commands: git newignore <language>[, language, ...] | <list>


# Github large file storage config
[filter "lfs"] 
    clean     = git-lfs clean %f
    smudge    = git-lfs smudge %f
    required  = true
